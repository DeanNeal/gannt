{"version":3,"sources":["backbone.modelbinder.js"],"names":[],"mappings":"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","file":"backbone.modelbinder.js","sourcesContent":["// Backbone.ModelBinder v1.1.0\r\n// (c) 2015 Bart Wood\r\n// Distributed Under MIT License\r\n\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define(['underscore', 'jquery', 'backbone'], factory);\r\n    } else if(typeof module !== 'undefined' && module.exports) {\r\n        // CommonJS\r\n        module.exports = factory(\r\n            require('underscore'),\r\n            require('jquery'),\r\n            require('backbone')\r\n        );\r\n    } else {\r\n        // Browser globals\r\n        factory(_, jQuery, Backbone);\r\n    }\r\n}(function(_, $, Backbone){\r\n\r\n    if(!Backbone){\r\n        throw 'Please include Backbone.js before Backbone.ModelBinder.js';\r\n    }\r\n\r\n    Backbone.ModelBinder = function(){\r\n        _.bindAll.apply(_, [this].concat(_.functions(this)));\r\n    };\r\n\r\n    // Static setter for class level options\r\n    Backbone.ModelBinder.SetOptions = function(options){\r\n        Backbone.ModelBinder.options = options;\r\n    };\r\n\r\n    // Current version of the library.\r\n    Backbone.ModelBinder.VERSION = '1.1.0';\r\n    Backbone.ModelBinder.Constants = {};\r\n    Backbone.ModelBinder.Constants.ModelToView = 'ModelToView';\r\n    Backbone.ModelBinder.Constants.ViewToModel = 'ViewToModel';\r\n\r\n    _.extend(Backbone.ModelBinder.prototype, {\r\n\r\n        bind:function (model, rootEl, attributeBindings, options) {\r\n            this.unbind();\r\n\r\n            this._model = model;\r\n            this._rootEl = rootEl;\r\n            this._setOptions(options);\r\n\r\n            if (!this._model) this._throwException('model must be specified');\r\n            if (!this._rootEl) this._throwException('rootEl must be specified');\r\n\r\n            if(attributeBindings){\r\n                // Create a deep clone of the attribute bindings\r\n                this._attributeBindings = $.extend(true, {}, attributeBindings);\r\n\r\n                this._initializeAttributeBindings();\r\n                this._initializeElBindings();\r\n            }\r\n            else {\r\n                this._initializeDefaultBindings();\r\n            }\r\n\r\n            this._bindModelToView();\r\n            this._bindViewToModel();\r\n        },\r\n\r\n        bindCustomTriggers: function (model, rootEl, triggers, attributeBindings, modelSetOptions) {\r\n            this._triggers = triggers;\r\n            this.bind(model, rootEl, attributeBindings, modelSetOptions);\r\n        },\r\n\r\n        unbind:function () {\r\n            this._unbindModelToView();\r\n            this._unbindViewToModel();\r\n\r\n            if(this._attributeBindings){\r\n                delete this._attributeBindings;\r\n                this._attributeBindings = undefined;\r\n            }\r\n        },\r\n\r\n        _setOptions: function(options){\r\n            this._options = _.extend({\r\n                boundAttribute: 'name'\r\n            }, Backbone.ModelBinder.options, options);\r\n\r\n            // initialize default options\r\n            if(!this._options['modelSetOptions']){\r\n                this._options['modelSetOptions'] = {};\r\n            }\r\n            this._options['modelSetOptions'].changeSource = 'ModelBinder';\r\n\r\n            if(!this._options['changeTriggers']){\r\n                this._options['changeTriggers'] = {'': 'change', '[contenteditable]': 'blur'};\r\n            }\r\n\r\n            if(!this._options['initialCopyDirection']){\r\n                this._options['initialCopyDirection'] = Backbone.ModelBinder.Constants.ModelToView;\r\n            }\r\n        },\r\n\r\n        // Converts the input bindings, which might just be empty or strings, to binding objects\r\n        _initializeAttributeBindings:function () {\r\n            var attributeBindingKey, inputBinding, attributeBinding, elementBindingCount, elementBinding;\r\n\r\n            for (attributeBindingKey in this._attributeBindings) {\r\n                inputBinding = this._attributeBindings[attributeBindingKey];\r\n\r\n                if (_.isString(inputBinding)) {\r\n                    attributeBinding = {elementBindings: [{selector: inputBinding}]};\r\n                }\r\n                else if (_.isArray(inputBinding)) {\r\n                    attributeBinding = {elementBindings: inputBinding};\r\n                }\r\n                else if(_.isObject(inputBinding)){\r\n                    attributeBinding = {elementBindings: [inputBinding]};\r\n                }\r\n                else {\r\n                    this._throwException('Unsupported type passed to Model Binder ' + attributeBinding);\r\n                }\r\n\r\n                // Add a linkage from the element binding back to the attribute binding\r\n                for(elementBindingCount = 0; elementBindingCount < attributeBinding.elementBindings.length; elementBindingCount++){\r\n                    elementBinding = attributeBinding.elementBindings[elementBindingCount];\r\n                    elementBinding.attributeBinding = attributeBinding;\r\n                }\r\n\r\n                attributeBinding.attributeName = attributeBindingKey;\r\n                this._attributeBindings[attributeBindingKey] = attributeBinding;\r\n            }\r\n        },\r\n\r\n        // If the bindings are not specified, the default binding is performed on the specified attribute, name by default\r\n        _initializeDefaultBindings: function(){\r\n            var elCount, elsWithAttribute, matchedEl, name, attributeBinding;\r\n\r\n            this._attributeBindings = {};\r\n            elsWithAttribute = $('[' + this._options['boundAttribute'] + ']', this._rootEl);\r\n\r\n            for(elCount = 0; elCount < elsWithAttribute.length; elCount++){\r\n                matchedEl = elsWithAttribute[elCount];\r\n                name = $(matchedEl).attr(this._options['boundAttribute']);\r\n\r\n                // For elements like radio buttons we only want a single attribute binding with possibly multiple element bindings\r\n                if(!this._attributeBindings[name]){\r\n                    attributeBinding =  {attributeName: name};\r\n                    attributeBinding.elementBindings = [{attributeBinding: attributeBinding, boundEls: [matchedEl]}];\r\n                    this._attributeBindings[name] = attributeBinding;\r\n                }\r\n                else{\r\n                    this._attributeBindings[name].elementBindings.push({attributeBinding: this._attributeBindings[name], boundEls: [matchedEl]});\r\n                }\r\n            }\r\n        },\r\n\r\n        _initializeElBindings:function () {\r\n            var bindingKey, attributeBinding, bindingCount, elementBinding, foundEls, elCount, el;\r\n            for (bindingKey in this._attributeBindings) {\r\n                attributeBinding = this._attributeBindings[bindingKey];\r\n\r\n                for (bindingCount = 0; bindingCount < attributeBinding.elementBindings.length; bindingCount++) {\r\n                    elementBinding = attributeBinding.elementBindings[bindingCount];\r\n                    if (elementBinding.selector === '') {\r\n                        foundEls = $(this._rootEl);\r\n                    }\r\n                    else {\r\n                        foundEls = $(elementBinding.selector, this._rootEl);\r\n                    }\r\n\r\n                    if (foundEls.length === 0) {\r\n                        this._throwException('Bad binding found. No elements returned for binding selector ' + elementBinding.selector);\r\n                    }\r\n                    else {\r\n                        elementBinding.boundEls = [];\r\n                        for (elCount = 0; elCount < foundEls.length; elCount++) {\r\n                            el = foundEls[elCount];\r\n                            elementBinding.boundEls.push(el);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        _bindModelToView: function () {\r\n            this._model.on('change', this._onModelChange, this);\r\n\r\n            if(this._options['initialCopyDirection'] === Backbone.ModelBinder.Constants.ModelToView){\r\n                this.copyModelAttributesToView();\r\n            }\r\n        },\r\n\r\n        // attributesToCopy is an optional parameter - if empty, all attributes\r\n        // that are bound will be copied.  Otherwise, only attributeBindings specified\r\n        // in the attributesToCopy are copied.\r\n        copyModelAttributesToView: function(attributesToCopy){\r\n            var attributeName, attributeBinding;\r\n\r\n            for (attributeName in this._attributeBindings) {\r\n                if(attributesToCopy === undefined || _.indexOf(attributesToCopy, attributeName) !== -1){\r\n                    attributeBinding = this._attributeBindings[attributeName];\r\n                    this._copyModelToView(attributeBinding);\r\n                }\r\n            }\r\n        },\r\n\r\n        copyViewValuesToModel: function(){\r\n            var bindingKey, attributeBinding, bindingCount, elementBinding, elCount, el;\r\n            for (bindingKey in this._attributeBindings) {\r\n                attributeBinding = this._attributeBindings[bindingKey];\r\n\r\n                for (bindingCount = 0; bindingCount < attributeBinding.elementBindings.length; bindingCount++) {\r\n                    elementBinding = attributeBinding.elementBindings[bindingCount];\r\n\r\n                    if(this._isBindingUserEditable(elementBinding)){\r\n                        if(this._isBindingRadioGroup(elementBinding)){\r\n                            el = this._getRadioButtonGroupCheckedEl(elementBinding);\r\n                            if(el){\r\n                                this._copyViewToModel(elementBinding, el);\r\n                            }\r\n                        }\r\n                        else {\r\n                            for(elCount = 0; elCount < elementBinding.boundEls.length; elCount++){\r\n                                el = $(elementBinding.boundEls[elCount]);\r\n                                if(this._isElUserEditable(el)){\r\n                                    this._copyViewToModel(elementBinding, el);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        _unbindModelToView: function(){\r\n            if(this._model){\r\n                this._model.off('change', this._onModelChange);\r\n                this._model = undefined;\r\n            }\r\n        },\r\n\r\n        _bindViewToModel: function () {\r\n            _.each(this._options['changeTriggers'], function (event, selector) {\r\n                $(this._rootEl).on(event, selector, this._onElChanged);\r\n            }, this);\r\n\r\n            if(this._options['initialCopyDirection'] === Backbone.ModelBinder.Constants.ViewToModel){\r\n                this.copyViewValuesToModel();\r\n            }\r\n        },\r\n\r\n        _unbindViewToModel: function () {\r\n            if(this._options && this._options['changeTriggers']){\r\n                _.each(this._options['changeTriggers'], function (event, selector) {\r\n                    $(this._rootEl).off(event, selector, this._onElChanged);\r\n                }, this);\r\n            }\r\n        },\r\n\r\n        _onElChanged:function (event) {\r\n            var el, elBindings, elBindingCount, elBinding;\r\n\r\n            el = $(event.target)[0];\r\n            elBindings = this._getElBindings(el);\r\n\r\n            for(elBindingCount = 0; elBindingCount < elBindings.length; elBindingCount++){\r\n                elBinding = elBindings[elBindingCount];\r\n                if (this._isBindingUserEditable(elBinding)) {\r\n                    this._copyViewToModel(elBinding, el);\r\n                }\r\n            }\r\n        },\r\n\r\n        _isBindingUserEditable: function(elBinding){\r\n            return elBinding.elAttribute === undefined ||\r\n                elBinding.elAttribute === 'text' ||\r\n                elBinding.elAttribute === 'html';\r\n        },\r\n\r\n        _isElUserEditable: function(el){\r\n            var isContentEditable = el.attr('contenteditable');\r\n            return isContentEditable || el.is('input') || el.is('select') || el.is('textarea');\r\n        },\r\n\r\n        _isBindingRadioGroup: function(elBinding){\r\n            var elCount, el;\r\n            var isAllRadioButtons = elBinding.boundEls.length > 0;\r\n            for(elCount = 0; elCount < elBinding.boundEls.length; elCount++){\r\n                el = $(elBinding.boundEls[elCount]);\r\n                if(el.attr('type') !== 'radio'){\r\n                    isAllRadioButtons = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return isAllRadioButtons;\r\n        },\r\n\r\n        _getRadioButtonGroupCheckedEl: function(elBinding){\r\n            var elCount, el;\r\n            for(elCount = 0; elCount < elBinding.boundEls.length; elCount++){\r\n                el = $(elBinding.boundEls[elCount]);\r\n                if(el.attr('type') === 'radio' && el.prop('checked')){\r\n                    return el;\r\n                }\r\n            }\r\n\r\n            return undefined;\r\n        },\r\n\r\n        _getElBindings:function (findEl) {\r\n            var attributeName, attributeBinding, elementBindingCount, elementBinding, boundElCount, boundEl;\r\n            var elBindings = [];\r\n\r\n            for (attributeName in this._attributeBindings) {\r\n                attributeBinding = this._attributeBindings[attributeName];\r\n\r\n                for (elementBindingCount = 0; elementBindingCount < attributeBinding.elementBindings.length; elementBindingCount++) {\r\n                    elementBinding = attributeBinding.elementBindings[elementBindingCount];\r\n\r\n                    for (boundElCount = 0; boundElCount < elementBinding.boundEls.length; boundElCount++) {\r\n                        boundEl = elementBinding.boundEls[boundElCount];\r\n\r\n                        if (boundEl === findEl) {\r\n                            elBindings.push(elementBinding);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return elBindings;\r\n        },\r\n\r\n        _onModelChange:function () {\r\n            var changedAttribute, attributeBinding;\r\n\r\n            for (changedAttribute in this._model.changedAttributes()) {\r\n                attributeBinding = this._attributeBindings[changedAttribute];\r\n\r\n                if (attributeBinding) {\r\n                    this._copyModelToView(attributeBinding);\r\n                }\r\n            }\r\n        },\r\n\r\n        _copyModelToView:function (attributeBinding) {\r\n            var elementBindingCount, elementBinding, boundElCount, boundEl, value, convertedValue;\r\n\r\n            value = this._model.get(attributeBinding.attributeName);\r\n\r\n            for (elementBindingCount = 0; elementBindingCount < attributeBinding.elementBindings.length; elementBindingCount++) {\r\n                elementBinding = attributeBinding.elementBindings[elementBindingCount];\r\n\r\n                for (boundElCount = 0; boundElCount < elementBinding.boundEls.length; boundElCount++) {\r\n                    boundEl = elementBinding.boundEls[boundElCount];\r\n\r\n                    if(!boundEl._isSetting){\r\n                        convertedValue = this._getConvertedValue(Backbone.ModelBinder.Constants.ModelToView, elementBinding, value);\r\n                        this._setEl($(boundEl), elementBinding, convertedValue);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        _setEl: function (el, elementBinding, convertedValue) {\r\n            if (elementBinding.elAttribute) {\r\n                this._setElAttribute(el, elementBinding, convertedValue);\r\n            }\r\n            else {\r\n                this._setElValue(el, convertedValue, elementBinding);\r\n            }\r\n        },\r\n\r\n        _setElAttribute:function (el, elementBinding, convertedValue) {\r\n            switch (elementBinding.elAttribute) {\r\n                case 'html':\r\n                    el.html(convertedValue);\r\n                    break;\r\n                case 'text':\r\n                    el.text(convertedValue);\r\n                    break;\r\n                case 'enabled':\r\n                    el.prop('disabled', !convertedValue);\r\n                    break;\r\n                case 'displayed':\r\n                    el[convertedValue ? 'show' : 'hide']();\r\n                    break;\r\n                case 'hidden':\r\n                    el[convertedValue ? 'hide' : 'show']();\r\n                    break;\r\n                case 'css':\r\n                    el.css(elementBinding.cssAttribute, convertedValue);\r\n                    break;\r\n                case 'class':\r\n                    var previousValue = this._model.previous(elementBinding.attributeBinding.attributeName);\r\n                    var currentValue = this._model.get(elementBinding.attributeBinding.attributeName);\r\n                    // is current value is now defined then remove the class the may have been set for the undefined value\r\n                    if(!_.isUndefined(previousValue) || !_.isUndefined(currentValue)){\r\n                        previousValue = this._getConvertedValue(Backbone.ModelBinder.Constants.ModelToView, elementBinding, previousValue);\r\n                        el.removeClass(previousValue);\r\n                    }\r\n\r\n                    if(convertedValue){\r\n                        el.addClass(convertedValue);\r\n                    }\r\n                    break;\r\n                default:\r\n                    el.attr(elementBinding.elAttribute, convertedValue);\r\n            }\r\n        },\r\n\r\n        _setElValue:function (el, convertedValue, elementBinding) {\r\n            if(el.attr('type')){\r\n                switch (el.attr('type')) {\r\n                    case 'radio':\r\n                        el.prop('checked', el.val() === convertedValue);\r\n                        break;\r\n                    case 'checkbox':\r\n                         el.prop('checked', !!convertedValue);\r\n                        break;\r\n                    case 'file':\r\n                        break;\r\n                    default:\r\n                        el.val(convertedValue);\r\n                }\r\n            }\r\n            else if(el.is('input') || el.is('select') || el.is('textarea')){\r\n                el.val(convertedValue || (convertedValue === 0 ? '0' : ''));\r\n            }\r\n            else {\r\n            \t//bind data-attr\r\n            \tvar attrName = elementBinding.attributeBinding.attributeName;\r\n            \tif(el.data(attrName) || el.data(attrName) == '')\r\n            \t\tel.attr('data-' + attrName, convertedValue);\r\n                el.text(convertedValue || (convertedValue === 0 ? '0' : ''));\r\n            }\r\n        },\r\n\r\n        _copyViewToModel: function (elementBinding, el) {\r\n            var result, value, convertedValue;\r\n\r\n            if (!el._isSetting) {\r\n\r\n                el._isSetting = true;\r\n                result = this._setModel(elementBinding, $(el));\r\n                el._isSetting = false;\r\n\r\n                if(result && elementBinding.converter){\r\n                    value = this._model.get(elementBinding.attributeBinding.attributeName);\r\n                    convertedValue = this._getConvertedValue(Backbone.ModelBinder.Constants.ModelToView, elementBinding, value);\r\n                    this._setEl($(el), elementBinding, convertedValue);\r\n                }\r\n            }\r\n        },\r\n\r\n        _getElValue: function(elementBinding, el){\r\n            switch (el.attr('type')) {\r\n                case 'checkbox':\r\n                    return el.prop('checked') ? true : false;\r\n                default:\r\n                    if(el.attr('contenteditable') !== undefined){\r\n                        return el.html();\r\n                    }\r\n                    else {\r\n                        return el.val();\r\n                    }\r\n            }\r\n        },\r\n\r\n        _setModel: function (elementBinding, el) {\r\n            var data = {};\r\n            var elVal = this._getElValue(elementBinding, el);\r\n            elVal = this._getConvertedValue(Backbone.ModelBinder.Constants.ViewToModel, elementBinding, elVal);\r\n            data[elementBinding.attributeBinding.attributeName] = elVal;\r\n            return this._model.set(data,  this._options['modelSetOptions']);\r\n        },\r\n\r\n        _getConvertedValue: function (direction, elementBinding, value) {\r\n\r\n            if (elementBinding.converter) {\r\n                value = elementBinding.converter(direction, value, elementBinding.attributeBinding.attributeName, this._model, elementBinding.boundEls);\r\n            }\r\n            else if(this._options['converter']){\r\n                value = this._options['converter'](direction, value, elementBinding.attributeBinding.attributeName, this._model, elementBinding.boundEls);\r\n            }\r\n\r\n            return value;\r\n        },\r\n\r\n        _throwException: function(message){\r\n            if(this._options.suppressThrows){\r\n                if(typeof(console) !== 'undefined' && console.error){\r\n                    console.error(message);\r\n                }\r\n            }\r\n            else {\r\n                throw message;\r\n            }\r\n        }\r\n    });\r\n\r\n    Backbone.ModelBinder.CollectionConverter = function(collection){\r\n        this._collection = collection;\r\n\r\n        if(!this._collection){\r\n            throw 'Collection must be defined';\r\n        }\r\n        _.bindAll(this, 'convert');\r\n    };\r\n\r\n    _.extend(Backbone.ModelBinder.CollectionConverter.prototype, {\r\n        convert: function(direction, value){\r\n            if (direction === Backbone.ModelBinder.Constants.ModelToView) {\r\n                return value ? value.id : undefined;\r\n            }\r\n            else {\r\n                return this._collection.get(value);\r\n            }\r\n        }\r\n    });\r\n\r\n    // A static helper function to create a default set of bindings that you can customize before calling the bind() function\r\n    // rootEl - where to find all of the bound elements\r\n    // attributeType - probably 'name' or 'id' in most cases\r\n    // converter(optional) - the default converter you want applied to all your bindings\r\n    // elAttribute(optional) - the default elAttribute you want applied to all your bindings\r\n    Backbone.ModelBinder.createDefaultBindings = function(rootEl, attributeType, converter, elAttribute){\r\n        var foundEls, elCount, foundEl, attributeName;\r\n        var bindings = {};\r\n\r\n        foundEls = $('[' + attributeType + ']', rootEl);\r\n\r\n        for(elCount = 0; elCount < foundEls.length; elCount++){\r\n            foundEl = foundEls[elCount];\r\n            attributeName = $(foundEl).attr(attributeType);\r\n\r\n            if(!bindings[attributeName]){\r\n                var attributeBinding =  {selector: '[' + attributeType + '=\"' + attributeName + '\"]'};\r\n                bindings[attributeName] = attributeBinding;\r\n\r\n                if(converter){\r\n                    bindings[attributeName].converter = converter;\r\n                }\r\n\r\n                if(elAttribute){\r\n                    bindings[attributeName].elAttribute = elAttribute;\r\n                }\r\n            }\r\n        }\r\n\r\n        return bindings;\r\n    };\r\n\r\n    // Helps you to combine 2 sets of bindings\r\n    Backbone.ModelBinder.combineBindings = function(destination, source){\r\n        _.each(source, function(value, key){\r\n            var elementBinding = {selector: value.selector};\r\n\r\n            if(value.converter){\r\n                elementBinding.converter = value.converter;\r\n            }\r\n\r\n            if(value.elAttribute){\r\n                elementBinding.elAttribute = value.elAttribute;\r\n            }\r\n\r\n            if(!destination[key]){\r\n                destination[key] = elementBinding;\r\n            }\r\n            else {\r\n                destination[key] = [destination[key], elementBinding];\r\n            }\r\n        });\r\n\r\n        return destination;\r\n    };\r\n\r\n\r\n    return Backbone.ModelBinder;\r\n\r\n}));\r\n"],"sourceRoot":"/source/"}